{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { UserActionTypes } from './user.types';\nimport { auth, createUserProfileDocument, getCurrentUser, googleAuthProvider } from \"../../firebase/firebase.utils\";\nimport { signInFailure, signInSuccess, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from \"./user.actions\"; // Generator function\n// Return a generator object\n// yield - wait until complete, like await\n\nexport function* getUserSnapshot(user, additionalData) {\n  try {\n    const userReference = yield call(createUserProfileDocument, user, additionalData);\n    const userSnapshot = yield userReference.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    // put - saga dispatch\n    yield put(signInFailure(error.message));\n  }\n} // Generator function\n// Return a generator object\n// yield - wait until complete, like await\n\nexport function* googleSignIn() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleAuthProvider);\n    yield getUserSnapshot(user);\n  } catch (error) {\n    // put - saga dispatch\n    yield put(signInFailure(error.message));\n  }\n} // Generator function - return a generator object\n// yield - wait until complete, like await\n// Listen for GOOGLE_SIGN_IN_START Action\n// Pass returned Action object from GOOGLE_SIGN_IN_START, and call googleSignIn Saga\n\nexport function* googleSignInStart() {\n  // takeLatest - cancel all the generator functions except the last\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignIn);\n} // Generator function\n// Return a generator object\n// yield - wait until complete, like await\n\nexport function* emailSignIn({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getUserSnapshot(user);\n  } catch (error) {\n    // put - saga dispatch\n    yield put(signInFailure(error.message));\n  }\n} // Generator function - return a generator object\n// yield - wait until complete, like await\n// Listen for EMAIL_SIGN_IN_START Action\n// Pass returned Action object from EMAIL_SIGN_IN_START, and call emailSignIn Saga\n\nexport function* emailSignInStart() {\n  // takeLatest - cancel all the generator functions except the last\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, emailSignIn);\n} // Generator function - return a generator object\n// yield - wait until complete, like await\n\nexport function* isCurrentUserAuthenticated() {\n  try {\n    const user = yield getCurrentUser();\n    if (!user) return; // Else\n\n    yield getUserSnapshot(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n} // Generator function - return a generator object\n// yield - wait until complete, like await\n// Listen for CHECK_CURRENT_USER Action\n// Pass returned Action object returned from CHECK_CURRENT_USER, and call isCurrentUserAuthenticated Saga\n\nexport function* checkCurrentUserStart() {\n  // takeLatest - cancel all the generator functions except the last\n  yield takeLatest(UserActionTypes.CHECK_CURRENT_USER, isCurrentUserAuthenticated);\n} // Generator function\n// Return a generator object\n// yield - wait until complete, like await\n\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    // put - saga dispatch\n    yield put(signOutFailure(error.message));\n  }\n} // Generator function - return a generator object\n// yield - wait until complete, like await\n// Listen for SIGN_OUT_START Action\n// Pass returned Action object from SIGN_OUT_START, and call signOut Saga\n\nexport function* signOutStart() {\n  // takeLatest - cancel all the generator functions except the last\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n} // Generator function\n// Return a generator object\n// yield - wait until complete, like await\n// Receive returned Action object from SIGN_UP_START\n\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user: user,\n      additionalData: {\n        displayName: displayName\n      }\n    }));\n  } catch (error) {\n    // put - saga dispatch\n    yield put(signUpFailure(error.message));\n  }\n} // Generator function - return a generator object\n// yield - wait until complete, like await\n// Listen for SIGN_UP_START Action\n// Pass returned Action object from SIGN_UP_START, and call signUp Saga\n\nexport function* signUpStart() {\n  // takeLatest - cancel all the generator functions except the last\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n} // Generator function\n// Return a generator object\n// yield - wait until complete, like await\n// Receive returned Action object from SIGN_UP_START\n\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  try {\n    yield getUserSnapshot(user, additionalData);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n} // Generator function - return a generator object\n// yield - wait until complete, like await\n// Listen for SIGN_UP_SUCCESS Action\n// Pass returned Action object from SIGN_UP_SUCCESS, and call signInAfterSignUp Saga\n\nexport function* signInAfterSignUpStart() {\n  // takeLatest - cancel all the generator functions except the last\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n} // Combine all sagas into one saga\n\nexport function* userSagas() {\n  yield all([call(googleSignInStart), call(emailSignInStart), call(checkCurrentUserStart), call(signOutStart), call(signUpStart), call(signInAfterSignUpStart)]);\n}","map":{"version":3,"sources":["/Users/jacksonyin/Documents/development/E-commerce/client/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","createUserProfileDocument","getCurrentUser","googleAuthProvider","signInFailure","signInSuccess","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","getUserSnapshot","user","additionalData","userReference","userSnapshot","get","id","data","error","message","googleSignIn","signInWithPopup","googleSignInStart","GOOGLE_SIGN_IN_START","emailSignIn","payload","email","password","signInWithEmailAndPassword","emailSignInStart","EMAIL_SIGN_IN_START","isCurrentUserAuthenticated","checkCurrentUserStart","CHECK_CURRENT_USER","signOut","signOutStart","SIGN_OUT_START","signUp","displayName","createUserWithEmailAndPassword","signUpStart","SIGN_UP_START","signInAfterSignUp","signInAfterSignUpStart","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { UserActionTypes } from './user.types';\nimport { auth, createUserProfileDocument, getCurrentUser, googleAuthProvider } from \"../../firebase/firebase.utils\";\nimport {\n    signInFailure,\n    signInSuccess,\n    signOutSuccess,\n    signOutFailure,\n    signUpSuccess,\n    signUpFailure\n} from \"./user.actions\";\n\n\n\n// Generator function\n// Return a generator object\n// yield - wait until complete, like await\nexport function* getUserSnapshot(user, additionalData)\n{\n    try\n    {\n        const userReference = yield call(createUserProfileDocument, user, additionalData)\n        const userSnapshot = yield userReference.get();\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n    }\n    catch(error)\n    {\n        // put - saga dispatch\n        yield put(signInFailure(error.message));\n    }\n}\n\n// Generator function\n// Return a generator object\n// yield - wait until complete, like await\nexport function* googleSignIn()\n{\n    try\n    {\n        const { user } = yield auth.signInWithPopup(googleAuthProvider);\n        yield getUserSnapshot(user);\n    }\n    catch(error)\n    {\n        // put - saga dispatch\n        yield put(signInFailure(error.message));\n    }\n}\n\n// Generator function - return a generator object\n// yield - wait until complete, like await\n// Listen for GOOGLE_SIGN_IN_START Action\n// Pass returned Action object from GOOGLE_SIGN_IN_START, and call googleSignIn Saga\nexport function* googleSignInStart()\n{\n    // takeLatest - cancel all the generator functions except the last\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, googleSignIn);\n}\n\n// Generator function\n// Return a generator object\n// yield - wait until complete, like await\nexport function* emailSignIn({ payload: { email, password } })\n{\n    try\n    {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getUserSnapshot(user);\n    }\n    catch(error)\n    {\n        // put - saga dispatch\n        yield put(signInFailure(error.message));\n    }\n}\n\n// Generator function - return a generator object\n// yield - wait until complete, like await\n// Listen for EMAIL_SIGN_IN_START Action\n// Pass returned Action object from EMAIL_SIGN_IN_START, and call emailSignIn Saga\nexport function* emailSignInStart()\n{\n    // takeLatest - cancel all the generator functions except the last\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, emailSignIn);\n}\n\n// Generator function - return a generator object\n// yield - wait until complete, like await\nexport function* isCurrentUserAuthenticated()\n{\n    try\n    {\n        const user = yield getCurrentUser();\n        if (!user)\n            return;\n        // Else\n        yield getUserSnapshot(user);\n    }\n    catch (error)\n    {\n        yield put(signInFailure(error.message));\n    }\n}\n\n// Generator function - return a generator object\n// yield - wait until complete, like await\n// Listen for CHECK_CURRENT_USER Action\n// Pass returned Action object returned from CHECK_CURRENT_USER, and call isCurrentUserAuthenticated Saga\nexport function* checkCurrentUserStart()\n{\n    // takeLatest - cancel all the generator functions except the last\n    yield takeLatest(UserActionTypes.CHECK_CURRENT_USER, isCurrentUserAuthenticated);\n}\n\n// Generator function\n// Return a generator object\n// yield - wait until complete, like await\nexport function* signOut()\n{\n    try\n    {\n        yield auth.signOut();\n        yield put(signOutSuccess());\n    }\n    catch(error)\n    {\n        // put - saga dispatch\n        yield put(signOutFailure(error.message));\n    }\n}\n\n// Generator function - return a generator object\n// yield - wait until complete, like await\n// Listen for SIGN_OUT_START Action\n// Pass returned Action object from SIGN_OUT_START, and call signOut Saga\nexport function* signOutStart()\n{\n    // takeLatest - cancel all the generator functions except the last\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n\n// Generator function\n// Return a generator object\n// yield - wait until complete, like await\n// Receive returned Action object from SIGN_UP_START\nexport function* signUp({ payload: { email, password, displayName } })\n{\n    try\n    {\n        const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n        yield put(signUpSuccess({ user: user, additionalData: { displayName: displayName } }));\n    }\n    catch(error)\n    {\n        // put - saga dispatch\n        yield put(signUpFailure(error.message));\n    }\n}\n\n// Generator function - return a generator object\n// yield - wait until complete, like await\n// Listen for SIGN_UP_START Action\n// Pass returned Action object from SIGN_UP_START, and call signUp Saga\nexport function* signUpStart()\n{\n    // takeLatest - cancel all the generator functions except the last\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\n\n// Generator function\n// Return a generator object\n// yield - wait until complete, like await\n// Receive returned Action object from SIGN_UP_START\nexport function* signInAfterSignUp({ payload: { user, additionalData } })\n{\n    try\n    {\n        yield getUserSnapshot(user, additionalData);\n    }\n    catch (error)\n    {\n        yield put(signInFailure(error.message))\n    }\n}\n\n// Generator function - return a generator object\n// yield - wait until complete, like await\n// Listen for SIGN_UP_SUCCESS Action\n// Pass returned Action object from SIGN_UP_SUCCESS, and call signInAfterSignUp Saga\nexport function* signInAfterSignUpStart()\n{\n    // takeLatest - cancel all the generator functions except the last\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\n\n\n\n// Combine all sagas into one saga\nexport function* userSagas() {\n    yield all([\n        call(googleSignInStart),\n        call(emailSignInStart),\n        call(checkCurrentUserStart),\n        call(signOutStart),\n        call(signUpStart),\n        call(signInAfterSignUpStart)\n    ]);\n}"]},"metadata":{},"sourceType":"module"}