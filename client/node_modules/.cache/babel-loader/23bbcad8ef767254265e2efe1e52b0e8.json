{"ast":null,"code":"import { createSelector } from 'reselect';\nimport memoize from 'lodash.memoize'; // Caching - Memoization\n// Retrieve shop property from store\n\nconst selectShop = state => state.shop; // Retrieve collections from shop\n// Caching - Memoization\n// If state.shop doesn't change, memoize output selector\n\n\nexport const selectCollections = createSelector( // Input selector\n[selectShop], // Output selector\nshop => shop.collections); // Retrieve a specific collection based on URL parameter\n// Currying function (nested function) - one function only takes one argument\n// Caching - Memoization\n// If collectionUrlParam was memoized before, return the memoized output selector\n\nexport const selectCollection = memoize(collectionUrlParam => createSelector( // Input selector\n[selectCollections], // Output selector\ncollections => collections ? collections[collectionUrlParam] : null)); // Retrieve an array of collection objects\n// Caching - Memoization\n// If state.shop doesn't change, memoize output selector\n\nexport const selectCollectionForPreview = createSelector( // Input selector\n[selectCollections], // Output selector\n// Object.keys(object) - convert an object to an array\ncollections => collections ? Object.keys(collections).map(key => collections[key]) : []); // Retrieve isFetching\n// Caching - Memoization\n// If state.shop doesn't change, memoize output selector\n\nexport const selectIsCollectionFetching = createSelector([selectShop], shop => shop.isFetching); // Caching - Memoization\n// If state.shop doesn't change, memoize output selector\n\nexport const selectIsCollectionLoaded = createSelector([selectShop], // If collections is null, return false\nshop => !!shop.collections);","map":{"version":3,"sources":["/Users/jacksonyin/Documents/development/E-commerce/client/src/redux/shop/shop.selectors.js"],"names":["createSelector","memoize","selectShop","state","shop","selectCollections","collections","selectCollection","collectionUrlParam","selectCollectionForPreview","Object","keys","map","key","selectIsCollectionFetching","isFetching","selectIsCollectionLoaded"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,OAAOC,OAAP,MAAoB,gBAApB,C,CAIA;AAEA;;AACA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAlC,C,CAGA;AACA;AACA;;;AACA,OAAO,MAAMC,iBAAiB,GAAGL,cAAc,EAC3C;AACA,CAACE,UAAD,CAF2C,EAG3C;AACAE,IAAI,IAAIA,IAAI,CAACE,WAJ8B,CAAxC,C,CAQP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAGN,OAAO,CAACO,kBAAkB,IAAIR,cAAc,EACxE;AACA,CAACK,iBAAD,CAFwE,EAGxE;AACAC,WAAW,IAAKA,WAAW,GAAGA,WAAW,CAACE,kBAAD,CAAd,GAAqC,IAJQ,CAArC,CAAhC,C,CAOP;AACA;AACA;;AACA,OAAO,MAAMC,0BAA0B,GAAGT,cAAc,EACpD;AACA,CAACK,iBAAD,CAFoD,EAGpD;AACA;AACAC,WAAW,IAAKA,WAAW,GAAGI,MAAM,CAACC,IAAP,CAAYL,WAAZ,EAAyBM,GAAzB,CAA6BC,GAAG,IAAIP,WAAW,CAACO,GAAD,CAA/C,CAAH,GAA2D,EALlC,CAAjD,C,CAQP;AACA;AACA;;AACA,OAAO,MAAMC,0BAA0B,GAAGd,cAAc,CACpD,CAACE,UAAD,CADoD,EAEpDE,IAAI,IAAIA,IAAI,CAACW,UAFuC,CAAjD,C,CAKP;AACA;;AACA,OAAO,MAAMC,wBAAwB,GAAGhB,cAAc,CAClD,CAACE,UAAD,CADkD,EAElD;AACAE,IAAI,IAAI,CAAC,CAACA,IAAI,CAACE,WAHmC,CAA/C","sourcesContent":["import { createSelector } from 'reselect';\nimport memoize from 'lodash.memoize';\n\n\n\n// Caching - Memoization\n\n// Retrieve shop property from store\nconst selectShop = state => state.shop;\n\n\n// Retrieve collections from shop\n// Caching - Memoization\n// If state.shop doesn't change, memoize output selector\nexport const selectCollections = createSelector(\n    // Input selector\n    [selectShop],\n    // Output selector\n    shop => shop.collections\n);\n\n\n// Retrieve a specific collection based on URL parameter\n// Currying function (nested function) - one function only takes one argument\n// Caching - Memoization\n// If collectionUrlParam was memoized before, return the memoized output selector\nexport const selectCollection = memoize(collectionUrlParam => createSelector(\n    // Input selector\n    [selectCollections],\n    // Output selector\n    collections => (collections ? collections[collectionUrlParam] : null)\n));\n\n// Retrieve an array of collection objects\n// Caching - Memoization\n// If state.shop doesn't change, memoize output selector\nexport const selectCollectionForPreview = createSelector(\n    // Input selector\n    [selectCollections],\n    // Output selector\n    // Object.keys(object) - convert an object to an array\n    collections => (collections ? Object.keys(collections).map(key => collections[key]) : [])\n);\n\n// Retrieve isFetching\n// Caching - Memoization\n// If state.shop doesn't change, memoize output selector\nexport const selectIsCollectionFetching = createSelector(\n    [selectShop],\n    shop => shop.isFetching\n);\n\n// Caching - Memoization\n// If state.shop doesn't change, memoize output selector\nexport const selectIsCollectionLoaded = createSelector(\n    [selectShop],\n    // If collections is null, return false\n    shop => !!shop.collections\n);"]},"metadata":{},"sourceType":"module"}