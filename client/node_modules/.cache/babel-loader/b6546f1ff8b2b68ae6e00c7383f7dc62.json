{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth'; // Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDz6ujTDViXPrpNZFPq0V1hxm-1_jan2Ak\",\n  authDomain: \"e-commerce-7b83e.firebaseapp.com\",\n  databaseURL: \"https://e-commerce-7b83e.firebaseio.com\",\n  projectId: \"e-commerce-7b83e\",\n  storageBucket: \"e-commerce-7b83e.appspot.com\",\n  messagingSenderId: \"718043204346\",\n  appId: \"1:718043204346:web:2321110cf5f0d0e890d743\",\n  measurementId: \"G-XFPC7B9SH2\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig); // Function to persist a new user in the database\n\nexport const createUserProfileDocument = async (user, additionalData) => {\n  // Safety check to ensure userAuth exists\n  if (!user) return; // Else\n  // Document Reference - object that represents the current place in the database\n  // Only Reference can perform CRUD operations\n\n  const userReference = firestore.doc(`users/${user.uid}`); // Document Snapshot\n  // Actual data in the database\n  // CRUD - Retrieve\n\n  const userSnapShot = await userReference.get(); // If there is no user with associated uid exists in the database\n  // Then, persist one\n\n  if (!userSnapShot.exists) {\n    const createdAt = new Date(); // Object destructing\n\n    const {\n      email,\n      displayName\n    } = user;\n\n    try {\n      // CRUD - Create\n      await userReference.set({\n        email,\n        displayName,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  return userReference;\n}; // Add collection and it corresponding documents\n\nexport const addCollectionAndDocuments = async (collectionKey, collection) => {\n  // Get the reference\n  const collectionReference = firestore.collection(collectionKey); // Bach request\n\n  const batch = firestore.batch();\n  collection.forEach(document => {\n    // Create a new Document Reference\n    const documentReference = collectionReference.doc();\n    batch.set(documentReference, document);\n  }); // Commit batch\n  // Possible asynchronous function\n\n  return await batch.commit();\n};\nexport const transformCollectionsSnapShot = collectionsSnapShot => {\n  const transformedCollections = collectionsSnapShot.docs.map(docSnapShot => {\n    const {\n      title,\n      items\n    } = docSnapShot.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: docSnapShot.id,\n      title,\n      items\n    };\n  }); // Save the collection in an object\n\n  return transformedCollections.reduce((accumulator, document) => {\n    accumulator[document.title.toLowerCase()] = document;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      unsubscribe();\n      resolve(user);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // Google account auth configurations\n\nexport const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\ngoogleAuthProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleAuthProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/jacksonyin/Documents/development/E-commerce/client/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","user","additionalData","userReference","firestore","doc","uid","userSnapShot","get","exists","createdAt","Date","email","displayName","set","error","console","log","message","addCollectionAndDocuments","collectionKey","collection","collectionReference","batch","forEach","document","documentReference","commit","transformCollectionsSnapShot","collectionsSnapShot","transformedCollections","docs","map","docSnapShot","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleAuthProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n\n\n// Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDz6ujTDViXPrpNZFPq0V1hxm-1_jan2Ak\",\n    authDomain: \"e-commerce-7b83e.firebaseapp.com\",\n    databaseURL: \"https://e-commerce-7b83e.firebaseio.com\",\n    projectId: \"e-commerce-7b83e\",\n    storageBucket: \"e-commerce-7b83e.appspot.com\",\n    messagingSenderId: \"718043204346\",\n    appId: \"1:718043204346:web:2321110cf5f0d0e890d743\",\n    measurementId: \"G-XFPC7B9SH2\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n\n// Function to persist a new user in the database\nexport const createUserProfileDocument = async (user, additionalData) => {\n    // Safety check to ensure userAuth exists\n    if (!user)\n        return;\n\n    // Else\n    // Document Reference - object that represents the current place in the database\n    // Only Reference can perform CRUD operations\n    const userReference = firestore.doc(`users/${user.uid}`);\n    // Document Snapshot\n    // Actual data in the database\n    // CRUD - Retrieve\n    const userSnapShot = await userReference.get();\n\n    // If there is no user with associated uid exists in the database\n    // Then, persist one\n    if (!userSnapShot.exists)\n    {\n        const createdAt = new Date();\n        // Object destructing\n        const { email, displayName } = user;\n\n        try\n        {\n            // CRUD - Create\n            await userReference.set({\n                email,\n                displayName,\n                createdAt,\n                ...additionalData\n            });\n        }\n        catch (error)\n        {\n            console.log(error.message);\n        }\n    }\n\n    return userReference;\n};\n\n// Add collection and it corresponding documents\nexport const addCollectionAndDocuments = async (collectionKey, collection) => {\n    // Get the reference\n    const collectionReference = firestore.collection(collectionKey);\n    // Bach request\n    const batch = firestore.batch();\n\n    collection.forEach(document => {\n        // Create a new Document Reference\n        const documentReference = collectionReference.doc();\n        batch.set(documentReference, document);\n    });\n\n    // Commit batch\n    // Possible asynchronous function\n    return await batch.commit();\n};\n\nexport const transformCollectionsSnapShot = collectionsSnapShot => {\n    const transformedCollections = collectionsSnapShot.docs.map(docSnapShot => {\n        const { title, items } = docSnapShot.data();\n        return {\n            routeName: encodeURI(title.toLowerCase()),\n            id: docSnapShot.id,\n            title,\n            items\n        };\n    });\n\n    // Save the collection in an object\n    return transformedCollections.reduce((accumulator, document) => {\n        accumulator[document.title.toLowerCase()] = document;\n        return accumulator;\n    }, {});\n};\n\nexport const getCurrentUser = () => {\n    return new Promise((resolve, reject) => {\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            unsubscribe();\n            resolve(user);\n        }, reject);\n    });\n};\n\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n\n// Google account auth configurations\nexport const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\ngoogleAuthProvider.setCustomParameters({ prompt: 'select_account' });\n\nexport const signInWithGoogle = () => auth.signInWithPopup(googleAuthProvider);\n\n\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}