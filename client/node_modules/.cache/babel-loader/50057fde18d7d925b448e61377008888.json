{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { firestore, transformCollectionsSnapShot } from \"../../firebase/firebase.utils\";\nimport { ShopActionTypes } from \"./shop.types\";\nimport { fetchCollectionsFailure, fetchCollectionsSuccess } from \"./shop.actions\"; // Generator function\n// Return a generator object\n// yield - wait until complete, like await\n\nexport function* fetchCollections() {\n  try {\n    const collectionsReference = firestore.collection('collections');\n    const collectionsSnapshot = yield collectionsReference.get(); // call - function call\n\n    const transformedCollectionsSnapShot = yield call(transformCollectionsSnapShot, collectionsSnapshot); // put - saga dispatch\n\n    yield put(fetchCollectionsSuccess(transformedCollectionsSnapShot));\n  } catch (error) {\n    // put - saga dispatch\n    yield put(fetchCollectionsFailure(error.message));\n  }\n} // Generator function - return a generator object\n// yield - wait until complete, like await\n// Listen for FETCH_COLLECTIONS_START\n// Pass returned Action object from FETCH_COLLECTIONS_START, and call fetchCollections Saga\n\nexport function* fetchCollectionsStart() {\n  // takeLatest - cancel all the generator functions except the last\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollections);\n} // Combine all sagas into one saga\n\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["/Users/jacksonyin/Documents/development/E-commerce/client/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","firestore","transformCollectionsSnapShot","ShopActionTypes","fetchCollectionsFailure","fetchCollectionsSuccess","fetchCollections","collectionsReference","collection","collectionsSnapshot","get","transformedCollectionsSnapShot","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,SAAT,EAAoBC,4BAApB,QAAwD,+BAAxD;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gBAAjE,C,CAIA;AACA;AACA;;AACA,OAAO,UAAUC,gBAAV,GACP;AACI,MACA;AACI,UAAMC,oBAAoB,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAA7B;AACA,UAAMC,mBAAmB,GAAG,MAAMF,oBAAoB,CAACG,GAArB,EAAlC,CAFJ,CAGI;;AACA,UAAMC,8BAA8B,GAAG,MAAMb,IAAI,CAACI,4BAAD,EAA+BO,mBAA/B,CAAjD,CAJJ,CAKI;;AACA,UAAMV,GAAG,CAACM,uBAAuB,CAACM,8BAAD,CAAxB,CAAT;AACH,GARD,CASA,OAAOC,KAAP,EACA;AACI;AACA,UAAMb,GAAG,CAACK,uBAAuB,CAACQ,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH;AACJ,C,CAED;AACA;AACA;AACA;;AACA,OAAO,UAAUC,qBAAV,GACP;AACI;AACA,QAAMjB,UAAU,CAACM,eAAe,CAACY,uBAAjB,EAA0CT,gBAA1C,CAAhB;AACH,C,CAED;;AACA,OAAO,UAAUU,SAAV,GAAsB;AACzB,QAAMhB,GAAG,CAAC,CACNF,IAAI,CAACgB,qBAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { firestore, transformCollectionsSnapShot } from \"../../firebase/firebase.utils\";\nimport { ShopActionTypes } from \"./shop.types\";\nimport { fetchCollectionsFailure, fetchCollectionsSuccess } from \"./shop.actions\";\n\n\n\n// Generator function\n// Return a generator object\n// yield - wait until complete, like await\nexport function* fetchCollections()\n{\n    try\n    {\n        const collectionsReference = firestore.collection('collections');\n        const collectionsSnapshot = yield collectionsReference.get();\n        // call - function call\n        const transformedCollectionsSnapShot = yield call(transformCollectionsSnapShot, collectionsSnapshot);\n        // put - saga dispatch\n        yield put(fetchCollectionsSuccess(transformedCollectionsSnapShot))\n    }\n    catch (error)\n    {\n        // put - saga dispatch\n        yield put(fetchCollectionsFailure(error.message));\n    }\n}\n\n// Generator function - return a generator object\n// yield - wait until complete, like await\n// Listen for FETCH_COLLECTIONS_START\n// Pass returned Action object from FETCH_COLLECTIONS_START, and call fetchCollections Saga\nexport function* fetchCollectionsStart()\n{\n    // takeLatest - cancel all the generator functions except the last\n    yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollections);\n}\n\n// Combine all sagas into one saga\nexport function* shopSagas() {\n    yield all([\n        call(fetchCollectionsStart)\n    ]);\n}"]},"metadata":{},"sourceType":"module"}