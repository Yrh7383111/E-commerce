{"ast":null,"code":"var _jsxFileName = \"/Users/jacksonyin/Documents/development/E-commerce/client/src/components/sign-in/sign-in.component.jsx\";\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { ButtonsContainer, SignInContainer, TitleContainer } from \"./sign-in.styles\";\nimport { emailSignInStart, googleSignInStart } from \"../../redux/user/user.actions\";\n\nconst SignIn = () => {\n  // Component states\n  const [userCredentials, setUserCredentials] = useState({\n    email: '',\n    password: ''\n  }); // Dispatch Actions to all Reducers\n  // dispatch - packs up the argument as an Action object, and deliveries it to all Reducers\n\n  const dispatch = useDispatch(); // Helper functions\n  // Handle when user types something in the field\n\n  const handleChange = event => {\n    // Object destructing\n    const {\n      value,\n      name\n    } = event.target; // Dynamically assign value to name\n\n    setUserCredentials({ ...userCredentials,\n      [name]: value\n    });\n  }; // Handle when user submit the form\n\n\n  const {\n    email,\n    password\n  } = userCredentials;\n\n  const handleSubmit = async event => {\n    // Prevent default submit function of the browser\n    event.preventDefault(); // Object destructing\n\n    dispatch(emailSignInStart({\n      email: email,\n      password: password\n    }));\n  }; // Rendering\n\n\n  return /*#__PURE__*/React.createElement(SignInContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TitleContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, \"I already have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"Sign in with your email and password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    value: email,\n    handleChange: handleChange,\n    label: \"Email\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    value: password,\n    handleChange: handleChange,\n    label: \"Password\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(ButtonsContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, \"Sign in\"), /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: () => dispatch(googleSignInStart()),\n    isGoogleSignIn: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }\n  }, \"Sign in with Google\"))));\n};\n\nexport default SignIn;","map":{"version":3,"sources":["/Users/jacksonyin/Documents/development/E-commerce/client/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","useDispatch","FormInput","CustomButton","ButtonsContainer","SignInContainer","TitleContainer","emailSignInStart","googleSignInStart","SignIn","userCredentials","setUserCredentials","email","password","dispatch","handleChange","event","value","name","target","handleSubmit","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,SAASC,gBAAT,EAA2BC,eAA3B,EAA4CC,cAA5C,QAAkE,kBAAlE;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,+BAApD;;AAIA,MAAMC,MAAM,GAAG,MAAM;AACjB;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC;AACnDY,IAAAA,KAAK,EAAE,EAD4C;AAEnDC,IAAAA,QAAQ,EAAE;AAFyC,GAAD,CAAtD,CAFiB,CAOjB;AACA;;AACA,QAAMC,QAAQ,GAAGb,WAAW,EAA5B,CATiB,CAYjB;AAEA;;AACA,QAAMc,YAAY,GAAGC,KAAK,IAAI;AAC1B;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBF,KAAK,CAACG,MAA9B,CAF0B,CAI1B;;AACAR,IAAAA,kBAAkB,CAAC,EAAE,GAAGD,eAAL;AAAsB,OAACQ,IAAD,GAAQD;AAA9B,KAAD,CAAlB;AACH,GAND,CAfiB,CAuBjB;;;AACA,QAAM;AAAEL,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,eAA5B;;AACA,QAAMU,YAAY,GAAG,MAAMJ,KAAN,IAAe;AAChC;AACAA,IAAAA,KAAK,CAACK,cAAN,GAFgC,CAIhC;;AACAP,IAAAA,QAAQ,CAACP,gBAAgB,CAAC;AAAEK,MAAAA,KAAK,EAAEA,KAAT;AAAgBC,MAAAA,QAAQ,EAAEA;AAA1B,KAAD,CAAjB,CAAR;AACH,GAND,CAzBiB,CAkCjB;;;AACA,sBACI,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAFJ,eAII;AAAM,IAAA,QAAQ,EAAEO,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,OAAhB;AAAwB,IAAA,IAAI,EAAC,OAA7B;AACW,IAAA,KAAK,EAAER,KADlB;AAEW,IAAA,YAAY,EAAEG,YAFzB;AAGW,IAAA,KAAK,EAAC,OAHjB;AAIW,IAAA,QAAQ,MAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAMI,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,UAAhB;AAA2B,IAAA,IAAI,EAAC,UAAhC;AACW,IAAA,KAAK,EAAEF,QADlB;AAEW,IAAA,YAAY,EAAEE,YAFzB;AAGW,IAAA,KAAK,EAAC,UAHjB;AAIW,IAAA,QAAQ,MAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,eAWI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,eAII,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,QAAnB;AAA4B,IAAA,OAAO,EAAE,MAAMD,QAAQ,CAACN,iBAAiB,EAAlB,CAAnD;AAA0E,IAAA,cAAc,MAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAJJ,CAXJ,CAJJ,CADJ;AA2BH,CA9DD;;AAiEA,eAAeC,MAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { ButtonsContainer, SignInContainer, TitleContainer } from \"./sign-in.styles\";\nimport { emailSignInStart, googleSignInStart } from \"../../redux/user/user.actions\";\n\n\n\nconst SignIn = () => {\n    // Component states\n    const [userCredentials, setUserCredentials] = useState({\n        email: '',\n        password: ''\n    });\n\n    // Dispatch Actions to all Reducers\n    // dispatch - packs up the argument as an Action object, and deliveries it to all Reducers\n    const dispatch = useDispatch();\n\n\n    // Helper functions\n\n    // Handle when user types something in the field\n    const handleChange = event => {\n        // Object destructing\n        const { value, name } = event.target;\n\n        // Dynamically assign value to name\n        setUserCredentials({ ...userCredentials, [name]: value });\n    };\n\n    // Handle when user submit the form\n    const { email, password } = userCredentials;\n    const handleSubmit = async event => {\n        // Prevent default submit function of the browser\n        event.preventDefault();\n\n        // Object destructing\n        dispatch(emailSignInStart({ email: email, password: password }));\n    };\n\n\n    // Rendering\n    return (\n        <SignInContainer>\n            <TitleContainer>I already have an account</TitleContainer>\n            <span>Sign in with your email and password</span>\n\n            <form onSubmit={handleSubmit}>\n                <FormInput name='email' type='email'\n                           value={email}\n                           handleChange={handleChange}\n                           label='Email'\n                           required />\n                <FormInput name='password' type='password'\n                           value={password}\n                           handleChange={handleChange}\n                           label='Password'\n                           required />\n                <ButtonsContainer>\n                    <CustomButton type='submit'>\n                        Sign in\n                    </CustomButton>\n                    <CustomButton type='button' onClick={() => dispatch(googleSignInStart())} isGoogleSignIn>\n                        Sign in with Google\n                    </CustomButton>\n                </ButtonsContainer>\n            </form>\n        </SignInContainer>\n    );\n}\n\n\nexport default SignIn;"]},"metadata":{},"sourceType":"module"}