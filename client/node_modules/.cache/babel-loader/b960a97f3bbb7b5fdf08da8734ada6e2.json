{"ast":null,"code":"// Add a new cartItem\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n  // Check if there the cartItemToAdd exists in the cartItems array\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd.id); // cartItemToAdd exists in the cartItems array\n\n  if (existingCartItem) {\n    // Entire cart items\n    return cartItems.map(cartItem => {\n      // Single cart item\n      if (cartItem.id === cartItemToAdd.id) {\n        return { ...cartItem,\n          quantity: cartItem.quantity + 1\n        };\n      } else {\n        return cartItem;\n      }\n    });\n  } // cartItemToAdd doesn't exist in the cartItems array\n  else {\n      // Spread (Keep) all the existing cartItems\n      // And add cartItemToAdd with a new property quantity valued 1\n      return [...cartItems, { ...cartItemToAdd,\n        quantity: 1\n      }];\n    }\n}; // Decrease the quantity of an existing cartItem\n\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n  // Check if there the cartItemToAdd exists in the cartItems array\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id); // cartItemToAdd exists in the cartItems array, and the quantity is one\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  } // cartItemToAdd exists in the cartItems array, and the quantity is more than one\n  else {\n      // Entire cart items\n      return cartItems.map(cartItem => {\n        // Single cart item\n        if (cartItem.id === cartItemToRemove.id) {\n          return { ...cartItem,\n            quantity: cartItem.quantity - 1\n          };\n        } else {\n          return cartItem;\n        }\n      });\n    }\n};","map":{"version":3,"sources":["/Users/jacksonyin/Documents/development/E-commerce/client/src/redux/cart/cart.utils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","map","quantity","removeItemFromCart","cartItemToRemove","filter"],"mappings":"AAAA;AACA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,aAAZ,KAA8B;AACvD;AACA,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CAAeC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAAzD,CAAzB,CAFuD,CAIvD;;AACA,MAAIH,gBAAJ,EACA;AACI;AACA,WAAOF,SAAS,CAACM,GAAV,CAAcF,QAAQ,IAAI;AAC7B;AACA,UAAIA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAAlC,EACA;AACI,eAAO,EAAE,GAAGD,QAAL;AAAeG,UAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA7C,SAAP;AACH,OAHD,MAIK;AACD,eAAOH,QAAP;AACH;AACJ,KATM,CAAP;AAUH,GAbD,CAcA;AAdA,OAeK;AACD;AACA;AACA,aAAO,CAAC,GAAGJ,SAAJ,EAAe,EAAE,GAAGC,aAAL;AAAoBM,QAAAA,QAAQ,EAAE;AAA9B,OAAf,CAAP;AACH;AACJ,CAzBM,C,CA4BP;;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAACR,SAAD,EAAYS,gBAAZ,KAAiC;AAC/D;AACA,QAAMP,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CAAeC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAA5D,CAAzB,CAF+D,CAI/D;;AACA,MAAIH,gBAAgB,CAACK,QAAjB,KAA8B,CAAlC,EACA;AACI,WAAOP,SAAS,CAACU,MAAV,CAAiBN,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAA9D,CAAP;AACH,GAHD,CAIA;AAJA,OAKK;AACD;AACA,aAAOL,SAAS,CAACM,GAAV,CAAcF,QAAQ,IAAI;AAC7B;AACA,YAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAArC,EACA;AACI,iBAAO,EAAE,GAAGD,QAAL;AAAeG,YAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA7C,WAAP;AACH,SAHD,MAIK;AACD,iBAAOH,QAAP;AACH;AACJ,OATM,CAAP;AAUH;AACJ,CAvBM","sourcesContent":["// Add a new cartItem\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n    // Check if there the cartItemToAdd exists in the cartItems array\n    const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd.id);\n\n    // cartItemToAdd exists in the cartItems array\n    if (existingCartItem)\n    {\n        // Entire cart items\n        return cartItems.map(cartItem => {\n            // Single cart item\n            if (cartItem.id === cartItemToAdd.id)\n            {\n                return { ...cartItem, quantity: cartItem.quantity + 1 };\n            }\n            else {\n                return cartItem;\n            }\n        })\n    }\n    // cartItemToAdd doesn't exist in the cartItems array\n    else {\n        // Spread (Keep) all the existing cartItems\n        // And add cartItemToAdd with a new property quantity valued 1\n        return [...cartItems, { ...cartItemToAdd, quantity: 1 }];\n    }\n};\n\n\n// Decrease the quantity of an existing cartItem\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n    // Check if there the cartItemToAdd exists in the cartItems array\n    const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id);\n\n    // cartItemToAdd exists in the cartItems array, and the quantity is one\n    if (existingCartItem.quantity === 1)\n    {\n        return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n    }\n    // cartItemToAdd exists in the cartItems array, and the quantity is more than one\n    else {\n        // Entire cart items\n        return cartItems.map(cartItem => {\n            // Single cart item\n            if (cartItem.id === cartItemToRemove.id)\n            {\n                return { ...cartItem, quantity: cartItem.quantity - 1 };\n            }\n            else {\n                return cartItem;\n            }\n        })\n    }\n};"]},"metadata":{},"sourceType":"module"}